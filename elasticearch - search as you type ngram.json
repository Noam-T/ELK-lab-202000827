// elasticearch - search as you type.json (autocomplete)
// Using elasticsearch analyzer - autocomplete to allow search as we type completion (such as in goolge / wiki)
// to allow this we first need to make sure our mapping index is built correctly from the beggining 

# 2. Create new custom analyzer for our index moives to use

# 3. test the analyzer we just created and see that it breaks our keyword to unigarm, bigram and unigram
# unigram [S], biagram [St], unigram[Sta]
# 4. Apply our custom analyzer to our title filed and remap things appropriately
# ** Index was already created when we created the analyzer

# 5. validate mapping 
# curl -X GET "localhost:9200/_mapping/movie?pretty"

# 6. bulk load the movies again (check init-elasticsearch folder)

#2 , 3 , 4 , 5 ,6
PUT my_kibana_sample_data_flights
{
  "mappings": {
    "properties": {
      "FlightNum":{
        "type": "text"
      },
      "DistanceMiles":{
        "type": "float"
      },
      "Dest":{
        "type": "text",
        "analyzer": "autocomplete"
      }
    }
  },
    "settings": {
    "analysis": {
      "analyzer": {
        "autocomplete": {
          "tokenizer": "autocomplete",
          "filter": [
            "lowercase"
          ]
        },
        "autocomplete_search": {
          "tokenizer": "lowercase"
        }
      },
      "tokenizer": {
        "autocomplete": {
          "type": "edge_ngram",
          "min_gram": 2,
          "max_gram": 10,
          "token_chars": [
            "letter"
          ]
        }
      }
    }
  }
}

GET my_kibana_sample_data_flights/_analyze
{
	"analyzer": "autocomplete",
	"text" : "London Luton Airport"
}



GET my_kibana_sample_data_flights/_search
{
  "query": {
    "match_phrase_prefix": {
      "Dest": "Il"
    }
  }
}













